[{"title":"el表达式中c标签比较运算符问题","date":"2019-11-19T16:00:00.000Z","path":"2019/11/20/el表达式中c标签比较运算符问题/","text":"el表达式中c标签比较运算符问题 == eq 等于 != ne 不等于 &gt; gt 大于 &lt; lt 小于 &gt;= ge 大于等于 &lt;= le 小于等于字符串比较： 123&lt;c:if test=\"$&#123;requestScope.exp eq Str&#125;\"&gt;.......&lt;/c:if&gt;&lt;c:if test=\"$&#123;requestScope.exp eq 'Str'&#125;\"&gt;.......&lt;/c:if&gt;","categories":[{"name":"el","slug":"el","permalink":"/categories/el/"}],"tags":[{"name":"el表达式","slug":"el表达式","permalink":"/tags/el表达式/"}]},{"title":"学习笔记之Mybatis动态sql语句","date":"2019-11-02T14:14:08.000Z","path":"2019/11/02/学习笔记之Mybatis动态语句/","text":"Mybatis动态SQL 在多条件组合查询的时候可以拼接sql语句 if语句 &lt;select id=\"findByUser\" resultType=\"user\" parameterType=\"user\"&gt; select * from user where 1=1 &lt;if test=\"username!=null and username != '' \"&gt; and username like #{username} &lt;/if&gt; &lt;if test=\"address != null\"&gt; and address like #{address} &lt;/if&gt; &lt;/select&gt; test为判断条件，满足条件就会在原有的sql语句拼接上if标签中的条件语句 为避免出现select * from user and username like #{username}的错误语句，在后面加上where 1=1； where语句 &lt;select id=\"findByUser\" resultType=\"user\" parameterType=\"user\"&gt; &lt;include refid=\"defaultSql\"&gt;&lt;/include&gt; &lt;where&gt; &lt;if test=\"username!=null and username != '' \"&gt; and username like #{username} &lt;/if&gt; &lt;if test=\"address != null\"&gt; and address like #{address} &lt;/if&gt; &lt;/where&gt; &lt;/select&gt; where语句嵌套if语句，区别在于不需要加上where 1=1，和if语句加上where1=1的功能一致 foreach语句 &lt;select id=\"findInIds\" resultType=\"user\" parameterType=\"queryvo\"&gt; &lt;!-- select * from user where id in (1,2,3,4,5); --&gt; &lt;include refid=\"defaultSql\"&gt;&lt;/include&gt; &lt;where&gt; &lt;if test=\"ids != null and ids.size() &gt; 0\"&gt; &lt;foreach collection=\"ids\" open=\"id in ( \" close=\")\" item=\"uid\" separator=\",\"&gt; #{uid} &lt;/foreach&gt; &lt;/if&gt; &lt;/where&gt; &lt;/select&gt; foreach语句和if、where语句一起使用, 当满足if中的条件时，遍历conllection中的ids， 首先将open中的字符串和遍历语句之前的sql拼接， 然后开始遍历，item为ids中遍历的元素， #{uid}将uid拼接上sql语句， separator中的\",\"表示每个uid用该符号分隔开， close的\")\"表示是最后一个元素，将括号拼接上，使sql语句完整","categories":[{"name":"Java","slug":"Java","permalink":"/categories/Java/"}],"tags":[{"name":"Mybatis","slug":"Mybatis","permalink":"/tags/Mybatis/"},{"name":"Java","slug":"Java","permalink":"/tags/Java/"},{"name":"框架","slug":"框架","permalink":"/tags/框架/"},{"name":"SSM","slug":"SSM","permalink":"/tags/SSM/"},{"name":"Maven","slug":"Maven","permalink":"/tags/Maven/"}]},{"title":"学习笔记之Mybatis-1","date":"2019-10-24T16:00:00.000Z","path":"2019/10/25/学习笔记之MyBatis-1/","text":"学习笔记之Mybatis-1思考： Mybatis解决了什么问题？Mybatis的优点是？ Mybatis将SQL语句封装在配置文件中，降低了代码的耦合度。 减少代码量 增强移植性 基于SQL语法，简单易学 Mybatis的基本配置 全局配置文件：configuration.xml 123456789101112131415161718192021222324&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt; &lt;configuration&gt; &lt;environments default=\"mysql\"&gt; &lt;!-- 配置mysql的环境--&gt; &lt;environment id=\"mysql\"&gt; &lt;!-- 配置事务的类型--&gt; &lt;transactionManager type=\"JDBC\"&gt;&lt;/transactionManager&gt; &lt;!-- 配置数据源（连接池） --&gt; &lt;dataSource type=\"POOLED\"&gt; &lt;!-- 配置连接数据库的4个基本信息 --&gt; &lt;property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/&gt; &lt;property name=\"url\" value=\"jdbc:mysql://localhost:3306/eesy_mybatis\"/&gt; &lt;property name=\"username\" value=\"root\"/&gt; &lt;property name=\"password\" value=\"root\"/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource=\"com/novicemo/dao/UserDao.xml\"/&gt;//指定核心映射文件的位置 &lt;/mappers&gt; &lt;/configuration&gt; 核心映射文件：mapper.xml 123456789 &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"com.novicemo.dao.UserDao\"&gt;//dao接口&lt;select id=\"findAll\" resultType=\"User\"&gt;select * from user&lt;/select&gt; configuration.xml中的配置 别名配置：typeAliases 存在的意义：减少全限定类名的冗余配置代码如下： 123&lt;typeAliases&gt; &lt;typeAlias alias=\"user\" type=\"com.novicemo.domain.User\"&gt;&lt;/typeAliases&gt; 数据源配置：dataSource有三种：POOLED：与JDBC中数据库的池差不多，减少创建连接的时间UNPOOLED：没有数据库池，每次操作数据库都需要创建新的连接，性能差JNDI：不太了解 属性配置：properties 123456&lt;properties&gt; &lt;properties name=\"driver\" value=\"com.mysql.jdbc.driver\" /&gt; &lt;properties name=\"url\" value=\"jdbc:mysql://localhost:3306/eesy_mybatis\"/&gt; &lt;properties name=\"username\" value=\"root\"/&gt; &lt;properties name=\"password\" value=\"root\"/&gt;&lt;/properties&gt; 配置了properties可以在下面的数据库配置中用${name}的方式使用 Setting配置 配置二级缓存 1234&lt;settings&gt; &lt;setting name=\"cacheEnabled\" value=\"true\"/&gt; &lt;setting name=\"lazyLoadingEnabled\" value=\"true\"/&gt;&lt;/settings&gt; 核心映射文件：mapper.xml中的配置123456//必须配置，映射文件的唯一标识，避免下方select,insert等配置的id和其他映射文件重复 &lt;mapper namespace=\"com.novicemo.dao.UserDao\" /&gt; ``` ```java &lt;cache/&gt;//二级缓存必须配置 12345678910111213141516//查询Sql配置&lt;select id=\"findAll\" resultType=\"user\" useCache=\"true\"&gt;//id为方法名，resultType为返回类型,userCache设置为true，开启二级缓存select * from user&lt;/select&gt;//插入Sql配置&lt;insert id=\"insertUser\" parameterType=\"user\"&gt;//paraterType为参数类型，由于在全局配置文件中配置了别名，可以不用写全限定类名insert from user (username,address) values(#&#123;username&#125;,#&#123;address&#125;)&lt;/insert&gt;//删除Sql配置&lt;delete id=\"deleteUser\" parameterType=\"java.lang.Integer\"&gt;delete from user where id = #&#123;id&#125;&lt;/delete&gt;//跟新Sql配置&lt;update id=\"updateUser\" parameterType=\"user\"&gt; update user set username=#&#123;username&#125;,address=#&#123;address&#125;&lt;/update&gt; 简单理解一级缓存和二级缓存 一级缓存SqlSession级别的缓存，只要SqlSession不关闭和flush缓存就存在。 二级缓存SqlSessionFactory级别的缓存，只要是同一个SqlSessionFactory生产的SqlSession都可以公用缓存它是用key/value的方式存储数据的，如果执行两次根据id查询user的Sql,返回的user对象不是同一个","categories":[{"name":"Mybatis","slug":"Mybatis","permalink":"/categories/Mybatis/"}],"tags":[{"name":"Mybatis","slug":"Mybatis","permalink":"/tags/Mybatis/"},{"name":"Java","slug":"Java","permalink":"/tags/Java/"},{"name":"框架","slug":"框架","permalink":"/tags/框架/"},{"name":"SSM","slug":"SSM","permalink":"/tags/SSM/"}]},{"title":"my first blog articles","date":"2019-10-07T14:14:08.000Z","path":"2019/10/07/my-first-blog-articles/","text":"第一章内容 第二章内容 参考文献www.codesheep.cn","categories":[{"name":"Java","slug":"Java","permalink":"/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"/tags/Java/"},{"name":"Maven","slug":"Maven","permalink":"/tags/Maven/"}]},{"title":"Hello World","date":"2017-06-17T16:00:00.000Z","path":"2017/06/18/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"First","slug":"First","permalink":"/categories/First/"}],"tags":[{"name":"First","slug":"First","permalink":"/tags/First/"},{"name":"Second","slug":"Second","permalink":"/tags/Second/"}]}]