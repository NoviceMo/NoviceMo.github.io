[{"title":"el表达式中c标签比较运算符问题","date":"2019-11-19T16:00:00.000Z","path":"2019/11/20/el表达式中c标签比较运算符问题/","text":"el表达式中c标签比较运算符问题 == eq 等于 != ne 不等于 &gt; gt 大于 &lt; lt 小于 &gt;= ge 大于等于 &lt;= le 小于等于字符串比较： 123&lt;c:if test=\"$&#123;requestScope.exp eq Str&#125;\"&gt;.......&lt;/c:if&gt;&lt;c:if test=\"$&#123;requestScope.exp eq 'Str'&#125;\"&gt;.......&lt;/c:if&gt;","categories":[{"name":"el","slug":"el","permalink":"/categories/el/"}],"tags":[{"name":"el表达式","slug":"el表达式","permalink":"/tags/el表达式/"}]},{"title":"springmvc乱码","date":"2019-11-19T16:00:00.000Z","path":"2019/11/20/springmvc乱码/","text":"前端传入中文，Controller接收会乱码解决方法：配置web.xml： 123456789101112&lt;filter&gt; &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;UTF-8&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; 如果不行可能是tomcat服务器的问题 在tomcat的server.xml配置文件中加入URIEncoding=”UTF-8” 1234&lt;Connector port=\"8080\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\" URIEncoding=\"UTF-8\"/&gt;","categories":[{"name":"springmvc","slug":"springmvc","permalink":"/categories/springmvc/"}],"tags":[{"name":"-springmvc","slug":"springmvc","permalink":"/tags/springmvc/"}]},{"title":"mybatis动态sql比较运算符","date":"2019-11-19T16:00:00.000Z","path":"2019/11/20/mybatis动态sql比较运算符/","text":"mybatis动态sql比较运算符mybatis动态sql语句中不能出现&gt;= 或&lt;=或==等两个运算符的情况，需要将一个转义 123456+ \\&amp;lt; &lt; + \\&amp;gt; &gt; + \\&amp;lt;&amp;gt; &lt;&gt; + \\&amp;amp; &amp; + \\&amp;apos; ' //单引号 + \\&amp;quot; \" //双引号","categories":[{"name":"mybatis","slug":"mybatis","permalink":"/categories/mybatis/"}],"tags":[{"name":"-mybatis -动态sql","slug":"mybatis-动态sql","permalink":"/tags/mybatis-动态sql/"}]},{"title":"删除服务","date":"2019-11-19T16:00:00.000Z","path":"2019/11/20/删除服务/","text":"删除服务管理员打开cmd输入命令：sc delete 服务名","categories":[{"name":"计算机服务","slug":"计算机服务","permalink":"/categories/计算机服务/"}],"tags":[{"name":"计算机服务","slug":"计算机服务","permalink":"/tags/计算机服务/"}]},{"title":"无法编译jsp问题","date":"2019-11-19T16:00:00.000Z","path":"2019/11/20/无法编译jsp问题/","text":"报错：无法编译jspservlet和jsp的jar包和maven中 的jar包冲突，在pom.xml中不导入这两个包可以解决","categories":[{"name":"jsp","slug":"jsp","permalink":"/categories/jsp/"}],"tags":[{"name":"jsp","slug":"jsp","permalink":"/tags/jsp/"}]},{"title":"配置aop:advisor出错","date":"2019-11-19T16:00:00.000Z","path":"2019/11/20/一配置aopadvisor就出错/","text":"一配置aop:advisor出错jdk与下面的包冲突了。换个版本试一试，1.9.0版本应该可以 123&lt;groupId&gt;org.aspectj&lt;/groupId&gt;&lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;&lt;version&gt;1.6.8&lt;/version&gt;","categories":[{"name":"面向切面编程(aop)","slug":"面向切面编程-aop","permalink":"/categories/面向切面编程-aop/"}],"tags":[{"name":"面向切面编程(aop)","slug":"面向切面编程-aop","permalink":"/tags/面向切面编程-aop/"}]},{"title":"","date":"2019-11-13T15:13:21.352Z","path":"2019/11/13/oracle笔记/","text":"创建表空间12345create tablespace novicemodatafile 'c:\\novicemo.dbf'//文件路径加文件名size 100m//初始大小autoextend on //自动扩展next 10m;//扩展大小 删除删除表空间（tablespace）、存储过程（procedure）、存储函数(function)、触发器(trigger)都是用drop删除 1drop tablespace novicemo;// 创建用户123create user novicemoidentified by novicemo//密码default tablespace novicemo;//空间表 给用户授权 oracle数据库中常用角色 connect–连接角色，基本角色 resource–开发者角色 dba–超级管理员角色 1grant dba to novicemo;//给novicemo用户授予dba角色 三个删除1delete from person;//删除表中的所有记录 1drop table person;//删除表结构 1truncate table person;//先删除表，再创建表，效果等同于delete 序列(sesquence) 序列不属于哪一张表。 从一开始，依次递增，用于主键的赋值 dual虚表，没有任何意义，只是为了补全语法12create sequence s_person;//s_person为序列名insert into person(pid,pname) values(s_person.nextval,'小明');//用于主键赋值 解锁用户12alter user scott account unlock;//解锁用户alter user scott idendified by tiger;//解锁密码，也可用于重置密码 单行函数123456789101112//字符函数select upper('yes') from dual;//转化成大写select lower('YES') from dual;//转化成小写//数值函数select round(56.12,-2) from dual;//四舍五入，后面的参数表示小数点前或后的select trunc(56.12,-2) from dual;//直接截取select mod(10/3) from dual;//求余数//日期函数//sysdateselect sysdate+1 from dual;//算出明天此时//months_betweenselect sysdate","categories":[],"tags":[]},{"title":"学习笔记之Mybatis动态sql语句","date":"2019-11-02T14:14:08.000Z","path":"2019/11/02/学习笔记之Mybatis动态语句/","text":"Mybatis动态SQL 在多条件组合查询的时候可以拼接sql语句 if语句 &lt;select id=\"findByUser\" resultType=\"user\" parameterType=\"user\"&gt; select * from user where 1=1 &lt;if test=\"username!=null and username != '' \"&gt; and username like #{username} &lt;/if&gt; &lt;if test=\"address != null\"&gt; and address like #{address} &lt;/if&gt; &lt;/select&gt; test为判断条件，满足条件就会在原有的sql语句拼接上if标签中的条件语句 为避免出现select * from user and username like #{username}的错误语句，在后面加上where 1=1； where语句 &lt;select id=\"findByUser\" resultType=\"user\" parameterType=\"user\"&gt; &lt;include refid=\"defaultSql\"&gt;&lt;/include&gt; &lt;where&gt; &lt;if test=\"username!=null and username != '' \"&gt; and username like #{username} &lt;/if&gt; &lt;if test=\"address != null\"&gt; and address like #{address} &lt;/if&gt; &lt;/where&gt; &lt;/select&gt; where语句嵌套if语句，区别在于不需要加上where 1=1，和if语句加上where1=1的功能一致 foreach语句 &lt;select id=\"findInIds\" resultType=\"user\" parameterType=\"queryvo\"&gt; &lt;!-- select * from user where id in (1,2,3,4,5); --&gt; &lt;include refid=\"defaultSql\"&gt;&lt;/include&gt; &lt;where&gt; &lt;if test=\"ids != null and ids.size() &gt; 0\"&gt; &lt;foreach collection=\"ids\" open=\"id in ( \" close=\")\" item=\"uid\" separator=\",\"&gt; #{uid} &lt;/foreach&gt; &lt;/if&gt; &lt;/where&gt; &lt;/select&gt; foreach语句和if、where语句一起使用, 当满足if中的条件时，遍历conllection中的ids， 首先将open中的字符串和遍历语句之前的sql拼接， 然后开始遍历，item为ids中遍历的元素， #{uid}将uid拼接上sql语句， separator中的\",\"表示每个uid用该符号分隔开， close的\")\"表示是最后一个元素，将括号拼接上，使sql语句完整","categories":[{"name":"Java","slug":"Java","permalink":"/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"/tags/Java/"},{"name":"Maven","slug":"Maven","permalink":"/tags/Maven/"},{"name":"Mybatis","slug":"Mybatis","permalink":"/tags/Mybatis/"},{"name":"框架","slug":"框架","permalink":"/tags/框架/"},{"name":"SSM","slug":"SSM","permalink":"/tags/SSM/"}]},{"title":"学习笔记之Mybatis-1","date":"2019-10-24T16:00:00.000Z","path":"2019/10/25/学习笔记之MyBatis-1/","text":"学习笔记之Mybatis-1思考： Mybatis解决了什么问题？Mybatis的优点是？ Mybatis将SQL语句封装在配置文件中，降低了代码的耦合度。 减少代码量 增强移植性 基于SQL语法，简单易学 Mybatis的基本配置 全局配置文件：configuration.xml 123456789101112131415161718192021222324&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt; &lt;configuration&gt; &lt;environments default=\"mysql\"&gt; &lt;!-- 配置mysql的环境--&gt; &lt;environment id=\"mysql\"&gt; &lt;!-- 配置事务的类型--&gt; &lt;transactionManager type=\"JDBC\"&gt;&lt;/transactionManager&gt; &lt;!-- 配置数据源（连接池） --&gt; &lt;dataSource type=\"POOLED\"&gt; &lt;!-- 配置连接数据库的4个基本信息 --&gt; &lt;property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/&gt; &lt;property name=\"url\" value=\"jdbc:mysql://localhost:3306/eesy_mybatis\"/&gt; &lt;property name=\"username\" value=\"root\"/&gt; &lt;property name=\"password\" value=\"root\"/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource=\"com/novicemo/dao/UserDao.xml\"/&gt;//指定核心映射文件的位置 &lt;/mappers&gt; &lt;/configuration&gt; 核心映射文件：mapper.xml 123456789 &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"com.novicemo.dao.UserDao\"&gt;//dao接口&lt;select id=\"findAll\" resultType=\"User\"&gt;select * from user&lt;/select&gt; configuration.xml中的配置 别名配置：typeAliases 存在的意义：减少全限定类名的冗余配置代码如下： 123&lt;typeAliases&gt; &lt;typeAlias alias=\"user\" type=\"com.novicemo.domain.User\"&gt;&lt;/typeAliases&gt; 数据源配置：dataSource有三种：POOLED：与JDBC中数据库的池差不多，减少创建连接的时间UNPOOLED：没有数据库池，每次操作数据库都需要创建新的连接，性能差JNDI：不太了解 属性配置：properties 123456&lt;properties&gt; &lt;properties name=\"driver\" value=\"com.mysql.jdbc.driver\" /&gt; &lt;properties name=\"url\" value=\"jdbc:mysql://localhost:3306/eesy_mybatis\"/&gt; &lt;properties name=\"username\" value=\"root\"/&gt; &lt;properties name=\"password\" value=\"root\"/&gt;&lt;/properties&gt; 配置了properties可以在下面的数据库配置中用${name}的方式使用 Setting配置 配置二级缓存 1234&lt;settings&gt; &lt;setting name=\"cacheEnabled\" value=\"true\"/&gt; &lt;setting name=\"lazyLoadingEnabled\" value=\"true\"/&gt;&lt;/settings&gt; 核心映射文件：mapper.xml中的配置123456//必须配置，映射文件的唯一标识，避免下方select,insert等配置的id和其他映射文件重复 &lt;mapper namespace=\"com.novicemo.dao.UserDao\" /&gt; ``` ```java &lt;cache/&gt;//二级缓存必须配置 12345678910111213141516//查询Sql配置&lt;select id=\"findAll\" resultType=\"user\" useCache=\"true\"&gt;//id为方法名，resultType为返回类型,userCache设置为true，开启二级缓存select * from user&lt;/select&gt;//插入Sql配置&lt;insert id=\"insertUser\" parameterType=\"user\"&gt;//paraterType为参数类型，由于在全局配置文件中配置了别名，可以不用写全限定类名insert from user (username,address) values(#&#123;username&#125;,#&#123;address&#125;)&lt;/insert&gt;//删除Sql配置&lt;delete id=\"deleteUser\" parameterType=\"java.lang.Integer\"&gt;delete from user where id = #&#123;id&#125;&lt;/delete&gt;//跟新Sql配置&lt;update id=\"updateUser\" parameterType=\"user\"&gt; update user set username=#&#123;username&#125;,address=#&#123;address&#125;&lt;/update&gt; 简单理解一级缓存和二级缓存 一级缓存SqlSession级别的缓存，只要SqlSession不关闭和flush缓存就存在。 二级缓存SqlSessionFactory级别的缓存，只要是同一个SqlSessionFactory生产的SqlSession都可以公用缓存它是用key/value的方式存储数据的，如果执行两次根据id查询user的Sql,返回的user对象不是同一个","categories":[{"name":"Mybatis","slug":"Mybatis","permalink":"/categories/Mybatis/"}],"tags":[{"name":"Java","slug":"Java","permalink":"/tags/Java/"},{"name":"Mybatis","slug":"Mybatis","permalink":"/tags/Mybatis/"},{"name":"框架","slug":"框架","permalink":"/tags/框架/"},{"name":"SSM","slug":"SSM","permalink":"/tags/SSM/"}]},{"title":"my first blog articles","date":"2019-10-07T14:14:08.000Z","path":"2019/10/07/my-first-blog-articles/","text":"第一章内容 第二章内容 参考文献www.codesheep.cn","categories":[{"name":"Java","slug":"Java","permalink":"/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"/tags/Java/"},{"name":"Maven","slug":"Maven","permalink":"/tags/Maven/"}]},{"title":"Hello World","date":"2017-06-17T16:00:00.000Z","path":"2017/06/18/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"First","slug":"First","permalink":"/categories/First/"}],"tags":[{"name":"First","slug":"First","permalink":"/tags/First/"},{"name":"Second","slug":"Second","permalink":"/tags/Second/"}]}]